---
- name: Check if Whitelist object type is defined
  fail:
    msg: "Missidng required param: whitelist_network_type"
  when: whitelist_network_type is not defined
  delegate_to: localhost

- name: Whitelist Network Object Mandatory Params - whitelist_name, whitelist_value, whitelist_subtype
  fail:
    msg: "Missing any one of mandatory required parameters: whitelist_name, whitelist_value, whitelist_subtype."
  when:
  - whitelist_network_type == "network"
  - whitelist_name is not defined or whitelist_value is not defined or whitelist_subtype is not defined
  delegate_to: localhost

- name: Whitelist Network Feed Mandatory Params - whitelist_name
  fail:
    msg: "Missing mandatory required parameters: whitelist_name"
  when:
  - whitelist_network_type == "feed"
  - whitelist_name is not defined
  delegate_to: localhost

- name: Creating Network object
  ftd_configuration:
    operation: upsertNetworkObject
    data:
      version: "{{ whitelist_version | default(omit) }}"
      name: "{{ whitelist_name }}"
      description: "{{ whitelist_description | default(omit) }}"
      subType: "{{ whitelist_subtype }}"
      value: "{{ whitelist_value }}"
      isSystemDefined: "{{ whitelist_system_defined | default(omit) }}"
      dnsResolution: "{{ whitelist_dns_resolution | default(omit) }}"
      id: "{{ whitelist_id | default(omit) }}"
      type: "{{ whitelist_type | default('networkobject') }}"
    register_as: network_object
  when: whitelist_network_type == "network"

- name: Getting Network Feed
  ftd_configuration:
    operation: getNetworkFeedCategoryList
    filters:
      name: "{{ whitelist_name }}"
    register_as: network_object
  when: whitelist_network_type == "feed"

- name: Find Security Intelligence Network Policy
  ftd_configuration:
    operation: getSecurityIntelligenceNetworkPolicyList
    register_as: policies
  when: whitelist_network_type is defined

- name: Setup SecurityIntelligenceNetworkPolicy via Network Object
  ftd_configuration:
    operation: editSecurityIntelligenceNetworkPolicy
    data:
      version: "{{ policies[0]['version'] }}"
      name: "{{ policies[0]['name'] }}"
      blacklistForBlock: "{{ policies[0]['blacklistForBlock'] }}"
      whitelist: "{{ policies[0]['whitelist'] + [network_object] }}"
      id: "{{ policies[0]['id'] }}"
      type: securityintelligencenetworkpolicy
    path_params:
      objId: "{{ policies[0]['id'] }}"
  register: setup_status_network
  when: whitelist_network_type == "network"

- name: Setup SecurityIntelligenceNetworkPolicy via Network Feed
  ftd_configuration:
    operation: editSecurityIntelligenceNetworkPolicy
    data:
      version: "{{ policies[0]['version'] }}"
      name: "{{ policies[0]['name'] }}"
      blacklistForBlock: "{{ policies[0]['blacklistForBlock'] }}"
      whitelist: "{{ policies[0]['whitelist'] + [network_object[0]] }}"
      id: "{{ policies[0]['id'] }}"
      type: securityintelligencenetworkpolicy
    path_params:
      objId: "{{ policies[0]['id'] }}"
  register: setup_status_feed
  when: whitelist_network_type == "feed"

- name: Start deployment
  ftd_configuration:
    operation: addDeployment
    register_as: deployment_job
  when: setup_status_network.changed or setup_status_feed.changed

- name: Poll deployment status until the job is finished
  ftd_configuration:
    operation: getDeployment
    path_params:
      objId: '{{ deployment_job.id }}'
    register_as: deployment_status
  until: deployment_status.endTime != -1
  retries: 100
  delay: 3
  when: setup_status_network.changed or setup_status_feed.changed

- name: Stop the playbook if the deployment failed
  fail:
    msg: 'Deployment failed. Status: {{ deployment_status.statusMessages }}'
  when:
  - setup_status_network.changed or setup_status_feed.changed
  - deployment_status.state != 'DEPLOYED'
  
