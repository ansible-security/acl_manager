---
- name: Check if Blacklist object type is defined
  fail:
    msg: "Missidng required param: blacklist_network_type"
  when: blacklist_network_type is not defined
  delegate_to: localhost

- name: Blacklist Network Object Mandatory Params - blacklist_name, blacklist_value, blacklist_subtype
  fail:
    msg: "Missing any one of mandatory required parameters: blacklist_name, blacklist_value, blacklist_subtype"
  when:
    - blacklist_network_type == "network"
    - blacklist_name is not defined or blacklist_value is not defined or blacklist_subtype is not defined
  delegate_to: localhost

- name: Blacklist Network Feed Mandatory Params - blacklist_name
  fail:
    msg: "Missing mandatory required parameters: blacklist_name"
  when:
    - blacklist_network_type == "feed"
    - blacklist_name is not defined
  delegate_to: localhost

- name: Creating Network object
  ftd_configuration:
    operation: upsertNetworkObject
    data:
      version: "{{ blacklist_version | default(omit) }}"
      name: "{{ blacklist_name }}"
      description: "{{ blacklist_description | default(omit) }}"
      subType: "{{ blacklist_subtype }}"
      value: "{{ blacklist_value }}"
      isSystemDefined: "{{ blacklist_system_defined | default(omit) }}"
      dnsResolution: "{{ blacklist_dns_resolution | default(omit) }}"
      id: "{{ blacklist_id | default(omit) }}"
      type: "{{ blacklist_type | default('networkobject') }}"
    register_as: network_object
  when: blacklist_network_type == "network"

- name: Getting Network Feed
  ftd_configuration:
    operation: getNetworkFeedCategoryList
    filters:
      name: "{{ blacklist_name }}"
    register_as: network_object
  when: blacklist_network_type == "feed"

- name: Find Security Intelligence Network Policy
  ftd_configuration:
    operation: getSecurityIntelligenceNetworkPolicyList
    register_as: policies
  when: network_object is defined

- name: Setup SecurityIntelligenceNetworkPolicy via Network Object
  ftd_configuration:
    operation: editSecurityIntelligenceNetworkPolicy
    data:
      version: "{{ policies[0]['version'] }}"
      name: "{{ policies[0]['name'] }}"
      blacklistForBlock: "{{ policies[0]['blacklistForBlock'] + [network_object] }}"
      whitelist: "{{ policies[0]['whitelist'] }}"
      id: "{{ policies[0]['id'] }}"
      type: securityintelligencenetworkpolicy
    path_params:
      objId: "{{ policies[0]['id'] }}"
  register: setup_status_network
  when: blacklist_network_type == "network"

- name: Setup SecurityIntelligenceNetworkPolicy via Network Feed
  ftd_configuration:
    operation: editSecurityIntelligenceNetworkPolicy
    data:
      version: "{{ policies[0]['version'] }}"
      name: "{{ policies[0]['name'] }}"
      blacklistForBlock: "{{ policies[0]['blacklistForBlock'] + [network_object[0]] }}"
      whitelist: "{{ policies[0]['whitelist'] }}"
      id: "{{ policies[0]['id'] }}"
      type: securityintelligencenetworkpolicy
    path_params:
      objId: "{{ policies[0]['id'] }}"
  register: setup_status_feed
  when: blacklist_network_type == "feed"

- name: Start deployment
  ftd_configuration:
    operation: addDeployment
    register_as: deployment_job
  when: setup_status_network.changed or setup_status_feed.changed

- name: Poll deployment status until the job is finished
  ftd_configuration:
    operation: getDeployment
    path_params:
      objId: '{{ deployment_job.id }}'
    register_as: deployment_status
  until: deployment_status.endTime != -1
  retries: 100
  delay: 3
  when: setup_status_network.changed or setup_status_feed.changed

- name: Stop the playbook if the deployment failed
  fail:
    msg: 'Deployment failed. Status: {{ deployment_status.statusMessages }}'
  when:
    - setup_status_network.changed or setup_status_feed.changed
    - deployment_status.state != 'DEPLOYED'
